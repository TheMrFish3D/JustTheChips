import type { CalculationOutput } from '../../core/calculations/output.js'

interface ResultsSectionProps {
  results?: CalculationOutput
  isCalculating: boolean
  error?: string
}

function ResultCard({ title, value, unit, precision = 0 }: { 
  title: string; 
  value: number | undefined; 
  unit: string; 
  precision?: number 
}) {
  return (
    <div style={{ 
      border: '1px solid #ddd', 
      borderRadius: '6px', 
      padding: '12px',
      backgroundColor: '#f9f9f9' 
    }}>
      <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>{title}</div>
      <div style={{ fontSize: '18px', fontWeight: 'bold', color: value !== undefined ? '#333' : '#999' }}>
        {value !== undefined ? value.toFixed(precision) : 'â€”'} {unit}
      </div>
    </div>
  )
}

function CopyResults({ results }: { results: CalculationOutput }) {
  const copyToClipboard = () => {
    const resultsText = `CNC Calculation Results
============================

Speed & Feed:
- RPM: ${results.rpm}
- Feed Rate: ${results.feed_mm_min} mm/min
- Surface Speed: ${results.vc_m_min} m/min (${results.sfm} SFM)

Chipload:
- Adjusted: ${results.fz_mm.toFixed(3)} mm
- Base: ${results.fz_actual_mm.toFixed(3)} mm

Engagement:
- Radial (WOC): ${results.ae_mm.toFixed(2)} mm
- Axial (DOC): ${results.ap_mm.toFixed(2)} mm
- MRR: ${results.mrr_mm3_min.toFixed(0)} mmÂ³/min

Power & Force:
- Required Power: ${results.power_W.toFixed(0)} W
- Available Power: ${results.power_available_W.toFixed(0)} W
- Cutting Force: ${results.force_N.toFixed(0)} N

Tool Deflection:
- Total Deflection: ${results.deflection_mm.toFixed(4)} mm
- Effective Diameter: ${results.effectiveDiameter.toFixed(2)} mm

Tool Information:
- Type: ${results.toolType}
- User DOC Override: ${results.user_doc_override ? 'Yes' : 'No'}

${results.warnings.length > 0 ? `Warnings (${results.warnings.length}):
${results.warnings.map(w => `- ${w.type}: ${w.message}`).join('\n')}` : 'No warnings'}

Generated by JustTheChips CNC Calculator
`
    
    navigator.clipboard.writeText(resultsText).then(() => {
      // Simple feedback - could be enhanced with a toast notification
      const button = document.getElementById('copy-results-btn')
      if (button) {
        const originalText = button.textContent
        button.textContent = 'Copied!'
        button.style.backgroundColor = '#28a745'
        setTimeout(() => {
          button.textContent = originalText
          button.style.backgroundColor = '#007bff'
        }, 2000)
      }
    }).catch(() => {
      // Fallback for older browsers
      alert('Copy failed. Please select and copy the results manually.')
    })
  }

  const exportToJSON = () => {
    const dataStr = JSON.stringify(results, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `cnc-results-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  return (
    <div style={{ marginTop: '16px', padding: '12px', backgroundColor: '#f8f9fa', borderRadius: '6px', border: '1px solid #dee2e6' }}>
      <h5 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#495057' }}>Export Results</h5>
      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
        <button
          id="copy-results-btn"
          onClick={copyToClipboard}
          style={{
            padding: '6px 12px',
            fontSize: '12px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            transition: 'background-color 0.2s'
          }}
          onMouseOver={(e) => { e.currentTarget.style.backgroundColor = '#0056b3' }}
          onMouseOut={(e) => { e.currentTarget.style.backgroundColor = '#007bff' }}
        >
          ðŸ“‹ Copy to Clipboard
        </button>
        <button
          onClick={exportToJSON}
          style={{
            padding: '6px 12px',
            fontSize: '12px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            transition: 'background-color 0.2s'
          }}
          onMouseOver={(e) => { e.currentTarget.style.backgroundColor = '#1e7e34' }}
          onMouseOut={(e) => { e.currentTarget.style.backgroundColor = '#28a745' }}
        >
          ðŸ’¾ Export JSON
        </button>
      </div>
    </div>
  )
}

function WarningsList({ warnings }: { warnings: Array<{type: string, message: string, severity?: string}> }) {
  if (!warnings || warnings.length === 0) {
    return null
  }
  
  // Group warnings by severity
  const dangerWarnings = warnings.filter(w => w.severity === 'danger')
  const regularWarnings = warnings.filter(w => w.severity !== 'danger')
  
  const renderWarningGroup = (groupWarnings: typeof warnings, title: string, color: string, bgColor: string) => {
    if (groupWarnings.length === 0) return null
    
    return (
      <div style={{ marginBottom: '12px' }}>
        <h5 style={{ margin: '0 0 6px 0', color, fontSize: '14px', fontWeight: 'bold' }}>
          {title} ({groupWarnings.length})
        </h5>
        <ul style={{ margin: 0, paddingLeft: '20px', backgroundColor: bgColor, padding: '8px 12px 8px 32px', borderRadius: '4px', border: `1px solid ${color}20` }}>
          {groupWarnings.map((warning, index) => (
            <li key={index} style={{ color, marginBottom: '4px', lineHeight: '1.4' }}>
              <strong>{warning.type.replace(/_/g, ' ')}:</strong> {warning.message}
            </li>
          ))}
        </ul>
      </div>
    )
  }
  
  return (
    <div style={{ marginTop: '16px' }}>
      <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Analysis Warnings</h4>
      {renderWarningGroup(dangerWarnings, 'Critical Issues', '#dc3545', '#f8d7da')}
      {renderWarningGroup(regularWarnings, 'Recommendations', '#fd7e14', '#fff3cd')}
    </div>
  )
}

export function ResultsSection({ results, isCalculating, error }: ResultsSectionProps) {
  return (
    <div style={{ 
      border: '1px solid #ccc', 
      borderRadius: '8px', 
      padding: '16px' 
    }}>
      <h3 style={{ color: '#333', margin: '0 0 16px 0' }}>Results</h3>
      
      {error && (
        <div style={{ 
          backgroundColor: '#f8d7da', 
          border: '1px solid #f5c6cb', 
          borderRadius: '4px', 
          padding: '12px', 
          marginBottom: '16px',
          color: '#721c24'
        }}>
          <strong>Error:</strong> {error}
        </div>
      )}
      
      {isCalculating && (
        <div style={{ 
          backgroundColor: '#d1ecf1', 
          border: '1px solid #bee5eb', 
          borderRadius: '4px', 
          padding: '12px', 
          marginBottom: '16px',
          color: '#0c5460'
        }}>
          Calculating...
        </div>
      )}
      
      {!results && !isCalculating && !error && (
        <div style={{ 
          backgroundColor: '#f8f9fa', 
          border: '1px solid #dee2e6', 
          borderRadius: '4px', 
          padding: '12px', 
          color: '#6c757d',
          textAlign: 'center'
        }}>
          Enter machine, spindle, tool, material, and cut type to see results
        </div>
      )}
      
      {results && (
        <>
          {/* Speed and Feed Results */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Speed & Feed</h4>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', 
              gap: '12px' 
            }}>
              <ResultCard title="RPM" value={results.rpm} unit="rpm" />
              <ResultCard title="Feed Rate" value={results.feed_mm_min} unit="mm/min" />
              <ResultCard title="Surface Speed" value={results.vc_m_min} unit="m/min" />
              <ResultCard title="Surface Speed" value={results.sfm} unit="SFM" />
            </div>
          </div>
          
          {/* Chipload Results */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Chipload</h4>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', 
              gap: '12px' 
            }}>
              <ResultCard title="Chipload (Adjusted)" value={results.fz_mm} unit="mm" precision={3} />
              <ResultCard title="Chipload (Base)" value={results.fz_actual_mm} unit="mm" precision={3} />
            </div>
          </div>
          
          {/* Engagement Results */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Engagement</h4>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', 
              gap: '12px' 
            }}>
              <ResultCard title="Radial (WOC)" value={results.ae_mm} unit="mm" precision={2} />
              <ResultCard title="Axial (DOC)" value={results.ap_mm} unit="mm" precision={2} />
              <ResultCard title="MRR" value={results.mrr_mm3_min} unit="mmÂ³/min" precision={0} />
            </div>
          </div>
          
          {/* Power and Force Results */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Power & Force</h4>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', 
              gap: '12px' 
            }}>
              <ResultCard title="Required Power" value={results.power_W} unit="W" precision={0} />
              <ResultCard title="Available Power" value={results.power_available_W} unit="W" precision={0} />
              <ResultCard title="Cutting Force" value={results.force_N} unit="N" precision={0} />
            </div>
          </div>
          
          {/* Deflection Results */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Tool Deflection</h4>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', 
              gap: '12px' 
            }}>
              <ResultCard title="Total Deflection" value={results.deflection_mm} unit="mm" precision={4} />
              <ResultCard title="Effective Diameter" value={results.effectiveDiameter} unit="mm" precision={2} />
            </div>
          </div>
          
          {/* Tool Information */}
          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>Tool Information</h4>
            <div style={{ fontSize: '14px', color: '#666' }}>
              <div>Tool Type: <strong>{results.toolType}</strong></div>
              <div>User DOC Override: <strong>{results.user_doc_override ? 'Yes' : 'No'}</strong></div>
            </div>
          </div>
          
          {/* Copy/Export Results */}
          <CopyResults results={results} />
          
          {/* Warnings */}
          <WarningsList warnings={results.warnings} />
        </>
      )}
    </div>
  )
}